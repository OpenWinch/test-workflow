name: CMake

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  deb-release:
    name: deb-release 
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Install extra package
      run: |
        sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
        sudo apt-key adv --keyserver hkp://pool.sks-keyservers.net --recv-key 0xAB17C654
        sudo apt-get update
        sudo apt-get install python3-vcstool libsdl2-dev cppcheck gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
    - name: Add external libraries
      run: |
        vcs import ${GITHUB_WORKSPACE}/lib/ < ${GITHUB_WORKSPACE}/openwinch.repos
        cp -r ${GITHUB_WORKSPACE}/cmake/extra/* ${GITHUB_WORKSPACE}/lib
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build
    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake ${GITHUB_WORKSPACE} -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=${GITHUB_WORKSPACE}/cmake/platforms/arm-gnueabi.toolchain.cmake
    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE
    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
    - name: Package
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cpack -C $BUILD_TYPE
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: Packages
        path: ${{runner.workspace}}/build/packages/*.deb
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: OpenWinch ${{ github.ref }}
        body: |
          # RELEASE NOTES
          ## Changelog
          //TODO
        draft: true
        prerelease: false
    - name: Upload to Release
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const root = '${{runner.workspace}}/build/packages/';
          const path = require('path');
          const fs = require('fs');
          const release_id = '${{steps.create_release.outputs.id}}';
          for (let file of await fs.readdirSync(root)) {
            if (path.extname(file) === '.deb') {
              console.log('uploadReleaseAsset', file);
              await github.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release_id,
                name: file,
                data: await fs.readFileSync(`${root}/${file}`)
              });
            }
          }
#    - name: Upload release binaries
#      uses: alexellis/upload-assets@0.2.2
#      env:
#        GITHUB_TOKEN: ${{github.token}}
#      with:
#        asset_paths: '["${{runner.workspace}}/build/packages/*.deb"]'
#    - uses: meeDamian/github-release@2.0
#      with:
#        token: ${{ secrets.GITHUB_TOKEN }}
#        tag: ${{ github.ref }}
#        name: Release ${{ github.ref }}
#        body: >
#          This release actually changes the fabric of the reality, so be careful 
#          while applying, as error in database migration, can irrecoverably wipe 
#          some laws of physics.  
#        gzip: false
#        files: >
#          ${{runner.workspace}}/build/packages/*.deb
    

#    - name: Upload Release Asset
#      id: upload-release-asset 
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#        asset_path: ${{runner.workspace}}/build/packages/*.deb
#        asset_name: my-artifact.zip
#        asset_content_type: application/vnd.debian.binary-package
